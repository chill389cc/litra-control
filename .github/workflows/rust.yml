name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
   
    - name: install dependencies
      run: sudo apt-get update -y && sudo apt-get install libusb-1.0-0-dev
    - name: Run tests
      run: cargo test --verbose
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        # Artifact name
        name: litra-control-linux-amd64
        # A file, directory or wildcard pattern that describes what to upload
        path: target/release/litra-control
        # The desired behavior if no files are found using the provided path.
        if-no-files-found: error
        retention-days: 90
    
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs: 
      upload_url: ${{ steps.create_release.outputs.upload_url }} 
    
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false

  binaries:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macOS-latest
    steps:
    - uses: actions/checkout@v3
   
    - name: Build
      run: cargo build --verbose --release
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        # Artifact name
        name: litra-control-linux-win64
        # A file, directory or wildcard pattern that describes what to upload
        path: target/release/litra-control.exe
        # The desired behavior if no files are found using the provided path.
        if-no-files-found: error
        retention-days: 90
    - name: Upload assets
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: checkers/build/${{ matrix.os }}.tar.gz
        asset_name: ${{ matrix.os }}.tar.gz
        asset_content_type: application/gzip
        
